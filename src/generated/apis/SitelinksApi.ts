/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddItem400Response,
  AddItemRequestAllOfItemSitelinksValue,
  DeleteSitelinkRequest,
  PatchItemRequest,
  SetSitelinkRequest,
} from '../models/index';
import {
    AddItem400ResponseFromJSON,
    AddItem400ResponseToJSON,
    AddItemRequestAllOfItemSitelinksValueFromJSON,
    AddItemRequestAllOfItemSitelinksValueToJSON,
    DeleteSitelinkRequestFromJSON,
    DeleteSitelinkRequestToJSON,
    PatchItemRequestFromJSON,
    PatchItemRequestToJSON,
    SetSitelinkRequestFromJSON,
    SetSitelinkRequestToJSON,
} from '../models/index';

export interface DeleteSitelinkOperationRequest {
    itemId: string;
    siteId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
    deleteSitelinkRequest?: DeleteSitelinkRequest;
}

export interface GetSitelinkRequest {
    itemId: string;
    siteId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface GetSitelinksRequest {
    itemId: string;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface PatchSitelinksRequest {
    itemId: string;
    patchItemRequest: PatchItemRequest;
    ifMatch?: Array<string>;
    ifNoneMatch?: Array<string>;
    ifUnmodifiedSince?: string;
}

export interface SetSitelinkOperationRequest {
    itemId: string;
    siteId: string;
    setSitelinkRequest: SetSitelinkRequest;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

/**
 * 
 */
export class SitelinksApi extends runtime.BaseAPI {

    /**
     * Delete an Item\'s Sitelink
     */
    async deleteSitelinkRaw(requestParameters: DeleteSitelinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteSitelink().'
            );
        }

        if (requestParameters['siteId'] == null) {
            throw new runtime.RequiredError(
                'siteId',
                'Required parameter "siteId" was null or undefined when calling deleteSitelink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/v1/entities/items/{item_id}/sitelinks/{site_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"site_id"}}`, encodeURIComponent(String(requestParameters['siteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteSitelinkRequestToJSON(requestParameters['deleteSitelinkRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete an Item\'s Sitelink
     */
    async deleteSitelink(requestParameters: DeleteSitelinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteSitelinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an Item\'s Sitelink
     */
    async getSitelinkRaw(requestParameters: GetSitelinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddItemRequestAllOfItemSitelinksValue>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getSitelink().'
            );
        }

        if (requestParameters['siteId'] == null) {
            throw new runtime.RequiredError(
                'siteId',
                'Required parameter "siteId" was null or undefined when calling getSitelink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/v1/entities/items/{item_id}/sitelinks/{site_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"site_id"}}`, encodeURIComponent(String(requestParameters['siteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddItemRequestAllOfItemSitelinksValueFromJSON(jsonValue));
    }

    /**
     * Retrieve an Item\'s Sitelink
     */
    async getSitelink(requestParameters: GetSitelinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddItemRequestAllOfItemSitelinksValue> {
        const response = await this.getSitelinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an Item\'s Sitelinks
     */
    async getSitelinksRaw(requestParameters: GetSitelinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: AddItemRequestAllOfItemSitelinksValue; }>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getSitelinks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/v1/entities/items/{item_id}/sitelinks`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, AddItemRequestAllOfItemSitelinksValueFromJSON));
    }

    /**
     * Retrieve an Item\'s Sitelinks
     */
    async getSitelinks(requestParameters: GetSitelinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: AddItemRequestAllOfItemSitelinksValue; }> {
        const response = await this.getSitelinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change an Item\'s Sitelinks
     */
    async patchSitelinksRaw(requestParameters: PatchSitelinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: AddItemRequestAllOfItemSitelinksValue; }>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling patchSitelinks().'
            );
        }

        if (requestParameters['patchItemRequest'] == null) {
            throw new runtime.RequiredError(
                'patchItemRequest',
                'Required parameter "patchItemRequest" was null or undefined when calling patchSitelinks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        const response = await this.request({
            path: `/v1/entities/items/{item_id}/sitelinks`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchItemRequestToJSON(requestParameters['patchItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, AddItemRequestAllOfItemSitelinksValueFromJSON));
    }

    /**
     * Change an Item\'s Sitelinks
     */
    async patchSitelinks(requestParameters: PatchSitelinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: AddItemRequestAllOfItemSitelinksValue; }> {
        const response = await this.patchSitelinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add / Replace an Item\'s Sitelink
     */
    async setSitelinkRaw(requestParameters: SetSitelinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddItemRequestAllOfItemSitelinksValue>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling setSitelink().'
            );
        }

        if (requestParameters['siteId'] == null) {
            throw new runtime.RequiredError(
                'siteId',
                'Required parameter "siteId" was null or undefined when calling setSitelink().'
            );
        }

        if (requestParameters['setSitelinkRequest'] == null) {
            throw new runtime.RequiredError(
                'setSitelinkRequest',
                'Required parameter "setSitelinkRequest" was null or undefined when calling setSitelink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/v1/entities/items/{item_id}/sitelinks/{site_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"site_id"}}`, encodeURIComponent(String(requestParameters['siteId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetSitelinkRequestToJSON(requestParameters['setSitelinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddItemRequestAllOfItemSitelinksValueFromJSON(jsonValue));
    }

    /**
     * Add / Replace an Item\'s Sitelink
     */
    async setSitelink(requestParameters: SetSitelinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddItemRequestAllOfItemSitelinksValue> {
        const response = await this.setSitelinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
