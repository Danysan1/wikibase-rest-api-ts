/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddItem400Response,
  AddProperty201Response,
  AddPropertyRequest,
  PatchItemRequest,
} from '../models/index';
import {
    AddItem400ResponseFromJSON,
    AddItem400ResponseToJSON,
    AddProperty201ResponseFromJSON,
    AddProperty201ResponseToJSON,
    AddPropertyRequestFromJSON,
    AddPropertyRequestToJSON,
    PatchItemRequestFromJSON,
    PatchItemRequestToJSON,
} from '../models/index';

export interface AddPropertyOperationRequest {
    addPropertyRequest: AddPropertyRequest;
    authorization?: string;
}

export interface GetPropertyRequest {
    propertyId: string;
    fields?: Array<GetPropertyFieldsEnum>;
    ifNoneMatch?: Array<string>;
    ifModifiedSince?: string;
    ifMatch?: Array<string>;
    ifUnmodifiedSince?: string;
    authorization?: string;
}

export interface PatchPropertyRequest {
    propertyId: string;
    patchItemRequest: PatchItemRequest;
    ifMatch?: Array<string>;
    ifNoneMatch?: Array<string>;
    ifUnmodifiedSince?: string;
}

/**
 * 
 */
export class PropertiesApi extends runtime.BaseAPI {

    /**
     * Create a Wikibase Property
     */
    async addPropertyRaw(requestParameters: AddPropertyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddProperty201Response>> {
        if (requestParameters['addPropertyRequest'] == null) {
            throw new runtime.RequiredError(
                'addPropertyRequest',
                'Required parameter "addPropertyRequest" was null or undefined when calling addProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/v1/entities/properties`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPropertyRequestToJSON(requestParameters['addPropertyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddProperty201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a Wikibase Property
     */
    async addProperty(requestParameters: AddPropertyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddProperty201Response> {
        const response = await this.addPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single Wikibase Property by ID
     */
    async getPropertyRaw(requestParameters: GetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddProperty201Response>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling getProperty().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/v1/entities/properties/{property_id}`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddProperty201ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a single Wikibase Property by ID
     */
    async getProperty(requestParameters: GetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddProperty201Response> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a single Wikibase Property by ID
     */
    async patchPropertyRaw(requestParameters: PatchPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddProperty201Response>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling patchProperty().'
            );
        }

        if (requestParameters['patchItemRequest'] == null) {
            throw new runtime.RequiredError(
                'patchItemRequest',
                'Required parameter "patchItemRequest" was null or undefined when calling patchProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters['ifMatch'] != null) {
            headerParameters['If-Match'] = requestParameters['ifMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = requestParameters['ifNoneMatch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['ifUnmodifiedSince'] != null) {
            headerParameters['If-Unmodified-Since'] = String(requestParameters['ifUnmodifiedSince']);
        }

        const response = await this.request({
            path: `/v1/entities/properties/{property_id}`.replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchItemRequestToJSON(requestParameters['patchItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddProperty201ResponseFromJSON(jsonValue));
    }

    /**
     * Change a single Wikibase Property by ID
     */
    async patchProperty(requestParameters: PatchPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddProperty201Response> {
        const response = await this.patchPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPropertyFieldsEnum = {
    Type: 'type',
    DataType: 'data_type',
    Labels: 'labels',
    Descriptions: 'descriptions',
    Aliases: 'aliases',
    Statements: 'statements'
} as const;
export type GetPropertyFieldsEnum = typeof GetPropertyFieldsEnum[keyof typeof GetPropertyFieldsEnum];
