/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SimpleItemSearch200Response,
  SimpleItemSearch400Response,
  SimpleItemSuggest200Response,
} from '../models/index';
import {
    SimpleItemSearch200ResponseFromJSON,
    SimpleItemSearch200ResponseToJSON,
    SimpleItemSearch400ResponseFromJSON,
    SimpleItemSearch400ResponseToJSON,
    SimpleItemSuggest200ResponseFromJSON,
    SimpleItemSuggest200ResponseToJSON,
} from '../models/index';

export interface SimpleItemSearchRequest {
    q: string;
    language: string;
    limit?: number;
    offset?: number;
}

export interface SimpleItemSuggestRequest {
    q: string;
    language: string;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class ItemSearchApi extends runtime.BaseAPI {

    /**
     * Simple Item search by label and aliases
     */
    async simpleItemSearchRaw(requestParameters: SimpleItemSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleItemSearch200Response>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling simpleItemSearch().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling simpleItemSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v0/search/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleItemSearch200ResponseFromJSON(jsonValue));
    }

    /**
     * Simple Item search by label and aliases
     */
    async simpleItemSearch(requestParameters: SimpleItemSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleItemSearch200Response> {
        const response = await this.simpleItemSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint is currently in development and is not recommended for production use.
     * [WIP] Simple Item search by prefix, for labels and aliases
     */
    async simpleItemSuggestRaw(requestParameters: SimpleItemSuggestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleItemSuggest200Response>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling simpleItemSuggest().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling simpleItemSuggest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v0/suggest/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleItemSuggest200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint is currently in development and is not recommended for production use.
     * [WIP] Simple Item search by prefix, for labels and aliases
     */
    async simpleItemSuggest(requestParameters: SimpleItemSuggestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleItemSuggest200Response> {
        const response = await this.simpleItemSuggestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
