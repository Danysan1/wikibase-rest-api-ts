/* tslint:disable */
/* eslint-disable */
/**
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StatementProperty } from './StatementProperty';
import {
    StatementPropertyFromJSON,
    StatementPropertyFromJSONTyped,
    StatementPropertyToJSON,
} from './StatementProperty';
import type { StatementReferencesInner } from './StatementReferencesInner';
import {
    StatementReferencesInnerFromJSON,
    StatementReferencesInnerFromJSONTyped,
    StatementReferencesInnerToJSON,
} from './StatementReferencesInner';
import type { StatementValue } from './StatementValue';
import {
    StatementValueFromJSON,
    StatementValueFromJSONTyped,
    StatementValueToJSON,
} from './StatementValue';
import type { StatementQualifiersInner } from './StatementQualifiersInner';
import {
    StatementQualifiersInnerFromJSON,
    StatementQualifiersInnerFromJSONTyped,
    StatementQualifiersInnerToJSON,
} from './StatementQualifiersInner';

/**
 * 
 * @export
 * @interface Statement
 */
export interface Statement {
    /**
     * The globally unique identifier for this Statement
     * @type {string}
     * @memberof Statement
     */
    readonly id?: string;
    /**
     * The rank of the Statement
     * @type {string}
     * @memberof Statement
     */
    rank?: StatementRankEnum;
    /**
     * 
     * @type {StatementProperty}
     * @memberof Statement
     */
    property?: StatementProperty;
    /**
     * 
     * @type {StatementValue}
     * @memberof Statement
     */
    value?: StatementValue;
    /**
     * 
     * @type {Array<StatementQualifiersInner>}
     * @memberof Statement
     */
    qualifiers?: Array<StatementQualifiersInner>;
    /**
     * 
     * @type {Array<StatementReferencesInner>}
     * @memberof Statement
     */
    references?: Array<StatementReferencesInner>;
}


/**
 * @export
 */
export const StatementRankEnum = {
    Deprecated: 'deprecated',
    Normal: 'normal',
    Preferred: 'preferred'
} as const;
export type StatementRankEnum = typeof StatementRankEnum[keyof typeof StatementRankEnum];


/**
 * Check if a given object implements the Statement interface.
 */
export function instanceOfStatement(value: object): value is Statement {
    return true;
}

export function StatementFromJSON(json: any): Statement {
    return StatementFromJSONTyped(json, false);
}

export function StatementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Statement {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'rank': json['rank'] == null ? undefined : json['rank'],
        'property': json['property'] == null ? undefined : StatementPropertyFromJSON(json['property']),
        'value': json['value'] == null ? undefined : StatementValueFromJSON(json['value']),
        'qualifiers': json['qualifiers'] == null ? undefined : ((json['qualifiers'] as Array<any>).map(StatementQualifiersInnerFromJSON)),
        'references': json['references'] == null ? undefined : ((json['references'] as Array<any>).map(StatementReferencesInnerFromJSON)),
    };
}

export function StatementToJSON(value?: Omit<Statement, 'id'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'rank': value['rank'],
        'property': StatementPropertyToJSON(value['property']),
        'value': StatementValueToJSON(value['value']),
        'qualifiers': value['qualifiers'] == null ? undefined : ((value['qualifiers'] as Array<any>).map(StatementQualifiersInnerToJSON)),
        'references': value['references'] == null ? undefined : ((value['references'] as Array<any>).map(StatementReferencesInnerToJSON)),
    };
}

